package deliveryapp;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.table.*;
import javax.swing.*;

        
/**
 *
 * @author Shazin
 */
public class CustomerGUI extends javax.swing.JFrame {
    private DefaultTableModel model = new DefaultTableModel();
    private String[] column = {"Vendor", "ID", "Item Name", "Description", "Price"};
    Customer loggedIn;
    private static final String CUST_CREDS_PATH = "programData\\customerCreds.txt";
    private static final String MENU_PATH = "programData\\menu.txt";
    private static final String ORDERS_PATH = "programData\\orders.txt";

    /**
     * Creates new form CustomerGUI
     */
    public CustomerGUI(String username, String password, int balance, String location, String phone) {
        initComponents();
        loggedIn = new Customer(username, password, balance);
        loggedIn.setLocation(location);
        loggedIn.setPhone(phone);
        
        //If details are missing, ask for them
        if (location == "") {
            updateCustomerLocation();
        }
        if (phone == "") {
            updateCustomerPhone();
        }

        lb_welcome.setText("Welcome "+loggedIn.getUsername());
        lb_location.setText(loggedIn.getLocation());
        lb_balance.setText(Double.toString(loggedIn.getBalance()));
        lb_phone.setText(loggedIn.getPhone());
        
        model.setColumnIdentifiers(column);
        adjustColumnWidths();
        parseMenu();
        
        
    }
    
    //Testing
    private CustomerGUI() {
        initComponents();
        model.setColumnIdentifiers(column);
        loggedIn = new Customer("Shazin","123",100);
        loggedIn.setLocation("A-5-3");
        loggedIn.setPhone("+61252");
        lb_welcome.setText("Welcome "+loggedIn.getUsername());
        lb_location.setText(loggedIn.getLocation());
        lb_balance.setText(Double.toString(loggedIn.getBalance()));
        lb_phone.setText(loggedIn.getPhone());
        adjustColumnWidths();
        parseMenu();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb_welcome = new javax.swing.JLabel();
        bt_cart = new javax.swing.JButton();
        bt_orders = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_menu = new javax.swing.JTable();
        bt_reviews = new javax.swing.JButton();
        bt_addToCart = new javax.swing.JButton();
        bt_placeOrder = new javax.swing.JButton();
        bt_setLocation = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lb_locationLabel = new javax.swing.JLabel();
        lb_location = new javax.swing.JLabel();
        lb_balanceLabel = new javax.swing.JLabel();
        lb_balance = new javax.swing.JLabel();
        lb_phoneLabel = new javax.swing.JLabel();
        lb_phone = new javax.swing.JLabel();
        bt_setPhone = new javax.swing.JButton();
        lb_totalLabel = new javax.swing.JLabel();
        lb_total = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lb_welcome.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lb_welcome.setText("Welcome Customer");

        bt_cart.setText("View cart");
        bt_cart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cartActionPerformed(evt);
            }
        });

        bt_orders.setText("Orders");
        bt_orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_ordersActionPerformed(evt);
            }
        });

        tb_menu.setModel(model);
        tb_menu.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tb_menu);
        tb_menu.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        bt_reviews.setText("Reviews");

        bt_addToCart.setText("Add to cart");
        bt_addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_addToCartActionPerformed(evt);
            }
        });

        bt_placeOrder.setText("Place Order");
        bt_placeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_placeOrderActionPerformed(evt);
            }
        });

        bt_setLocation.setText("Set Location");
        bt_setLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_setLocationActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Food Delivery System");

        lb_locationLabel.setText("Delivery Location:");

        lb_location.setText("Auditorium 3, level 4");

        lb_balanceLabel.setText("Balance:");

        lb_balance.setText("1000.0");

        lb_phoneLabel.setText("Phone:");

        lb_phone.setText("+6025252525252");

        bt_setPhone.setText("Set Phone");
        bt_setPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_setPhoneActionPerformed(evt);
            }
        });

        lb_totalLabel.setText("Cart Total:");

        lb_total.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lb_welcome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lb_locationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lb_balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lb_phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lb_location, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lb_balance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lb_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(bt_cart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bt_orders, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(bt_setLocation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(bt_reviews, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bt_setPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bt_addToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(bt_placeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(1, 1, 1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lb_totalLabel)
                                .addGap(18, 18, 18)
                                .addComponent(lb_total, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(lb_welcome))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_phoneLabel)
                            .addComponent(lb_phone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_balanceLabel)
                            .addComponent(lb_balance))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_locationLabel)
                            .addComponent(lb_location))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bt_orders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_cart)
                        .addGap(18, 18, 18)
                        .addComponent(bt_setLocation)
                        .addGap(7, 7, 7)
                        .addComponent(bt_setPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_reviews)
                        .addGap(59, 59, 59)
                        .addComponent(bt_addToCart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_totalLabel)
                            .addComponent(lb_total))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_placeOrder)
                        .addGap(12, 12, 12))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void adjustColumnWidths() {
        TableColumnModel columnModel = tb_menu.getColumnModel();

        // Set the preferred width for specific columns
        columnModel.getColumn(0).setPreferredWidth(100); // Vendor column
        columnModel.getColumn(1).setPreferredWidth(30); // ID column
        columnModel.getColumn(2).setPreferredWidth(150); // Name column
        columnModel.getColumn(3).setPreferredWidth(250); // Desc column
        columnModel.getColumn(4).setPreferredWidth(30); // Price column
    }
    private void parseMenu() {
                try {
            Scanner scanner = new Scanner(new File(MENU_PATH));
            
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(";");
                
                // The first part is always the vendor name
                String vendorName = parts[0].trim();
                
                // Subsequent parts are menu items
                for (int i = 1; i < parts.length; i++) {
                    String[] itemDetails = parts[i].split("\\|");
                    
                    if (itemDetails.length == 4) {
                        int itemId = Integer.parseInt(itemDetails[0]);
                        String itemName = itemDetails[1].trim();
                        String description = itemDetails[2].trim();
                        int price = Integer.parseInt(itemDetails[3]);
                        
                        model.addRow(new Object[]{vendorName, itemId, itemName, description, price});
                        
                    } 
                }
            }
            
            scanner.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }
    
    private void bt_cartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cartActionPerformed
        // Create a new JDialog to display the cart contents
        JDialog viewCartDialog = new JDialog(this, "View Cart", true);

        // Create a table to display the cart items
        DefaultTableModel cartTableModel = new DefaultTableModel();
        cartTableModel.setColumnIdentifiers(new String[]{"Item ID", "Vendor", "Item Name", "Description", "Price", "Remove"});

        // Read item details from the menu.txt file and populate the table based on the item IDs in the customer's cart
        try {
            Scanner scanner = new Scanner(new File(MENU_PATH));

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(";");
                String vendorName = parts[0].trim();

                for (int i = 1; i < parts.length; i++) {
                    String[] itemDetails = parts[i].split("\\|");

                    if (itemDetails.length == 4) {
                        int itemId = Integer.parseInt(itemDetails[0]);

                        // Check if the item ID is in the customer's cart
                        if (loggedIn.getCart().contains(itemId)) {
                            String itemName = itemDetails[1].trim();
                            String description = itemDetails[2].trim();
                            int price = Integer.parseInt(itemDetails[3]);

                            // Add a row for each occurrence of the item in the cart
                            for (int cartItemId : loggedIn.getCart()) {
                                if (cartItemId == itemId) {
                                    cartTableModel.addRow(new Object[]{itemId, vendorName, itemName, description, price, "Remove"});
                                }
                            }
                        }
                    }
                }
            }

            scanner.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }

        JTable cartTable = new JTable(cartTableModel);

        // Add a MouseListener to handle clicks on the "Remove" column
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int column = cartTable.getColumnModel().getColumnIndex("Remove");
                int row = cartTable.rowAtPoint(evt.getPoint());

                if (column == cartTable.columnAtPoint(evt.getPoint()) && row != -1) {
                    // Handle the button click for the "Remove" column
                    int itemId = (int) cartTable.getValueAt(row, 0);
                    loggedIn.removeFromCart(itemId);
                    cartTableModel.removeRow(row);
                    updateTotal();
                }
            }
        });

        // Create a scroll pane for the table
        JScrollPane scrollPane = new JScrollPane(cartTable);

        // Add the scroll pane to the dialog
        viewCartDialog.add(scrollPane);

        // Set the size of the dialog
        viewCartDialog.setSize(500, 300);

        // Make the dialog visible
        viewCartDialog.setVisible(true);
    }//GEN-LAST:event_bt_cartActionPerformed

    private void bt_addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_addToCartActionPerformed
        // Get the selected row index
        int selectedRow = tb_menu.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to add to the cart.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the item ID and vendor from the selected row
        int itemId = (int) model.getValueAt(selectedRow, 1);
        String selectedVendor = (String) model.getValueAt(selectedRow, 0);

        // Check if the cart is empty or the item is from the same vendor
        if (loggedIn.getCart().isEmpty() || isItemFromSameVendor(selectedVendor)) {
            // Add the item to the customer's cart
            loggedIn.addToCart(itemId);
            updateTotal();


            // Show msg to indicate success
            JOptionPane.showMessageDialog(this, "Item added to the cart.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Fail msg
            JOptionPane.showMessageDialog(this, "You can only add items from the same vendor to the cart.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bt_addToCartActionPerformed

    private void updateTotal() {
            double total = calcCartTotal();
            lb_total.setText(String.valueOf(total));
    }
    
    private double getItemPrice(int itemId) {
       try {
            Scanner scanner = new Scanner(new File(MENU_PATH));
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(";");
                for (int i = 1; i < parts.length; i++) {
                    String[] itemDetails = parts[i].split("\\|");
                    if (itemDetails.length == 4) {
                        int currentItemId = Integer.parseInt(itemDetails[0]);
                        if (currentItemId == itemId) {
                            return Double.parseDouble(itemDetails[3]);
                        }
                    }
                }
            }
            scanner.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        return 0;
    }
    
    private double calcCartTotal() {
        double total = 0.0;
        // Calculate the total amount based on the item IDs in the cart
        // Get price list from menu and sum up everything
        for (int itemId : loggedIn.getCart()) {
            double itemPrice = getItemPrice(itemId);
            total += itemPrice;
        }
        return total;
    }
    
    private boolean isItemFromSameVendor(String selectedVendor) {
        // Check if the items in the cart are from the same vendor
        for (int itemId : loggedIn.getCart()) {
            String vendorForCartItem = getVendorForItem(itemId);
            if (!selectedVendor.equals(vendorForCartItem)) {
                return false;
            }
        }
        return true;
    }
    
    private String getVendorForItem(int itemId) {
        // Iterate through the rows in the table to find the vendor for the given item ID
        for (int row = 0; row < model.getRowCount(); row++) {
            if ((int) model.getValueAt(row, 1) == itemId) {
                // Found the row with the matching item ID, retrieve the vendor
                return (String) model.getValueAt(row, 0);
            }
        }
        return null;        
    }

    private void bt_placeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_placeOrderActionPerformed
        ArrayList<Integer> cart = loggedIn.getCart();

        if (cart == null || cart.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty. Please add items before placing an order.", "Empty Cart", JOptionPane.WARNING_MESSAGE);
            return; // Do not proceed with placing the order
        }

        String placedOrderId = loggedIn.placeOrder();
        if (placedOrderId != null) {
            // Order placed successfully
            Order placedOrder = loggedIn.findOrderById(placedOrderId);
            
            System.out.println(placedOrder.getOrderId());
            System.out.println(placedOrder.getCustomerUsername());
            System.out.println(placedOrder.getOrderDate());
            System.out.println(placedOrder.getCart());
            System.out.println(placedOrder.getDeliveryLocation());
            System.out.println(placedOrder.getTotalAmount());
            System.out.println(placedOrder.getStatus());
            System.out.println(placedOrder.getVendor(placedOrder.getCart()));
            
            storeOrderDetails(placedOrder);


            // Display success dialog box
            JOptionPane.showMessageDialog(this, "Order placed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Failed to place the order
            JOptionPane.showMessageDialog(this, "Failed to place the order. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bt_placeOrderActionPerformed

    private void storeOrderDetails(Order order) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ORDERS_PATH, true))) {
            // Format the order details
            String orderDetails = String.format("%s;%s;%s;%s;%s;%s;%s;%s;%n",
                    order.getCustomerUsername(),
                    order.getVendor(order.getCart()),
                    order.getOrderId(),
                    order.getOrderDate(),
                    order.getCart(),
                    order.getDeliveryLocation(),
                    order.getTotalAmount(),
                    order.getStatus());

            // Write the order details to the file
            writer.write(orderDetails);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error storing order details.");
        }
    }
    
    private void bt_setLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_setLocationActionPerformed
        updateCustomerLocation();
    }//GEN-LAST:event_bt_setLocationActionPerformed

    private void bt_setPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_setPhoneActionPerformed
        updateCustomerPhone();
    }//GEN-LAST:event_bt_setPhoneActionPerformed

    private void bt_ordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_ordersActionPerformed
        showOrderHistory();
    }//GEN-LAST:event_bt_ordersActionPerformed

    private void showOrderHistory() {
        // Create JFrame for order history
        JFrame orderHistoryFrame = new JFrame("Order History");
        orderHistoryFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        // Create JPanel for buttons
        JPanel buttonPanel = new JPanel();
        JButton reorderButton = new JButton("Reorder");
        JButton writeReviewButton = new JButton("Write Review");
        buttonPanel.add(reorderButton);
        buttonPanel.add(writeReviewButton);

        // Create JTable
        String[] columnNames = {"OrderID", "Vendor", "Date", "Location", "Cart", "Total", "Status"};
        DefaultTableModel orderModel = new DefaultTableModel(columnNames, 0);
        JTable orderTable = new JTable(orderModel);
        JScrollPane scrollPane = new JScrollPane(orderTable);
        
        fillOrderTable(orderModel);

        // Create a vertical BoxLayout for the JFrame
        Box verticalBox = Box.createVerticalBox();
        verticalBox.add(buttonPanel);
        verticalBox.add(scrollPane);

        // Add the Box to the JFrame
        orderHistoryFrame.getContentPane().add(verticalBox);

        // ActionListener for Reorder button
        reorderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected row and reorder the selected order
                int selectedRow = orderTable.getSelectedRow();
                if (selectedRow != -1) {
                    String selectedOrderId = (String) orderTable.getValueAt(selectedRow, 0);
                    //reorderOrder(selectedOrderId);
                } else {
                    JOptionPane.showMessageDialog(orderHistoryFrame, "Please select an order to reorder.", "Reorder Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        // ActionListener for Write Review button
        writeReviewButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected row and open a window to write a review for the selected order
                int selectedRow = orderTable.getSelectedRow();
                if (selectedRow != -1) {
                    String selectedOrderId = (String) orderTable.getValueAt(selectedRow, 0);
                    //openWriteReviewWindow(selectedOrderId);
                } else {
                    JOptionPane.showMessageDialog(orderHistoryFrame, "Please select an order to write a review.", "Write Review Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        // Pack and center the JFrame
        orderHistoryFrame.pack();
        orderHistoryFrame.setLocationRelativeTo(null);
        orderHistoryFrame.setVisible(true);
    }    
    
    private void fillOrderTable(DefaultTableModel orderModel) {
        // Read orders from the file and add matching orders to the table
        try (BufferedReader reader = new BufferedReader(new FileReader(ORDERS_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] orderDetails = line.split(";");

                // Check if the order matches the logged-in username
                if (orderDetails.length >= 1 && orderDetails[0].equals(loggedIn.getUsername())) {
                    // Extract specific details for display
                    String vendor = orderDetails[1];
                    String orderID = orderDetails[2];
                    String date = orderDetails[3];
                    String cart = orderDetails[4];
                    String location = orderDetails[5];
                    String total = orderDetails[6];
                    String status = orderDetails[7];
                    
                    try {
                            SimpleDateFormat originalFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
                            Date tempDate = originalFormat.parse(date);

                            SimpleDateFormat newFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                            date = newFormat.format(tempDate);
                    } catch (ParseException e) {
                            e.printStackTrace();
                    }                    
                    

                    // Add the extracted details to the table model
                    orderModel.addRow(new String[]{orderID, vendor, date, location, cart, total, status});
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void updateCustomerPhone() {
        // Display an input dialog prompting the user to enter a location
        String newPhone = JOptionPane.showInputDialog(this, "Enter your phone number: ");

        // Check if the user pressed "OK" and entered a location
        if (newPhone != null && !newPhone.trim().isEmpty()) {
            loggedIn.setPhone(newPhone);
            lb_phone.setText(loggedIn.getPhone());
            
            try {
            // Read the content of the file
            File file = new File(CUST_CREDS_PATH);
            BufferedReader reader = new BufferedReader(new FileReader(file));
            StringBuilder content = new StringBuilder();
            String line;

            // Iterate through the lines, update the location, and build the new content
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(";");
                if (parts.length == 5) {
                    String username = parts[0];
                    String password = parts[1];
                    String balance = parts[2];
                    String location = parts[3];
                    String currentPhone = parts[4];
                    
                    if (username.equals(loggedIn.getUsername())) {
                        // Update the location for the specific user
                        currentPhone = newPhone;
                    }

                    // Reconstruct the line with the updated information
                    String updatedLine = username + ";" + password + ";" + balance + ";" + location + ";" + currentPhone;
                    content.append(updatedLine).append("\n");
                }
            }

            // Close the reader
            reader.close();

            // Write the updated content back to the file
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            writer.write(content.toString());
            writer.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error updating customer location.");
        }
        }
    }
    
    private void updateCustomerLocation() {
        // Create a panel to hold components
        JPanel panel = new JPanel(new FlowLayout());

        // Create a text field for the user to enter a new location
        JTextField locationTextField = new JTextField(20);
        panel.add(new JLabel("Enter your Delivery Location:"));
        panel.add(locationTextField);

        // Create buttons for OK and Self Pickup
        JButton okButton = new JButton("OK");
        JButton selfPickupButton = new JButton("Self Pickup");
        panel.add(okButton);
        panel.add(selfPickupButton);

        // Create a dialog with the panel
        JDialog dialog = new JDialog();
        dialog.add(panel);
        dialog.pack();
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        // ActionListener for OK button
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateLocationFile(locationTextField.getText());
                dialog.dispose(); // Close the dialog
            }
        });

        // ActionListener for Self Pickup button
        selfPickupButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateLocationFile("Self Pickup");
                dialog.dispose(); // Close the dialog
            }
        });

        // Show the dialog
        dialog.setVisible(true);
    }
    
    
    private void updateLocationFile(String newLocation) {
        // Handle the location update logic
        if (newLocation != null && !newLocation.trim().isEmpty()) {
            loggedIn.setLocation(newLocation);
            lb_location.setText(loggedIn.getLocation());

            try {
                // Read the content of the file
                File file = new File(CUST_CREDS_PATH);
                BufferedReader reader = new BufferedReader(new FileReader(file));
                StringBuilder content = new StringBuilder();
                String line;

                // Iterate through the lines, update the location, and build the new content
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length == 5) {
                        String username = parts[0];
                        String password = parts[1];
                        String balance = parts[2];
                        String currentLocation = parts[3];
                        String phone = parts[4];

                        if (username.equals(loggedIn.getUsername())) {
                            // Update the location for the specific user
                            currentLocation = newLocation;
                        }

                        // Reconstruct the line with the updated information
                        String updatedLine = username + ";" + password + ";" + balance + ";" + currentLocation + ";" + phone;
                        content.append(updatedLine).append("\n");
                    }
                }

                // Close the reader
                reader.close();

                // Write the updated content back to the file
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                writer.write(content.toString());
                writer.close();

            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error updating customer location.");
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_addToCart;
    private javax.swing.JButton bt_cart;
    private javax.swing.JButton bt_orders;
    private javax.swing.JButton bt_placeOrder;
    private javax.swing.JButton bt_reviews;
    private javax.swing.JButton bt_setLocation;
    private javax.swing.JButton bt_setPhone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_balance;
    private javax.swing.JLabel lb_balanceLabel;
    private javax.swing.JLabel lb_location;
    private javax.swing.JLabel lb_locationLabel;
    private javax.swing.JLabel lb_phone;
    private javax.swing.JLabel lb_phoneLabel;
    private javax.swing.JLabel lb_total;
    private javax.swing.JLabel lb_totalLabel;
    private javax.swing.JLabel lb_welcome;
    private javax.swing.JTable tb_menu;
    // End of variables declaration//GEN-END:variables
}
